#!/usr/bin/env bash

set -e

err() { echo "ERROR: $*" >&2; }

if [[ $(git rev-parse --is-inside-work-tree) != true ]]; then
    err "Not inside a Git working tree."
    exit 1
fi

git_verify() {
    if ! git rev-parse --quiet --verify HEAD >/dev/null; then
        err "The current HEAD is detached."
        return 1
    fi

    if ! git diff-index --name-status --exit-code HEAD; then
        err "The working tree is not clean."
        return 1
    fi

    return 0
}

if ! git_verify; then
    echo "You've got a chance to fix it. Don't miss it."
    "$SHELL"
    if ! git_verify; then
        echo "You've failed."
        exit 1
    fi
fi

branch=$(git symbolic-ref --short HEAD)
remote=origin

# For now, abort if HEAD is not on master
# if [[ $branch != master ]]; then
#     err "Not on master branch."
#     exit 1
# fi

git fetch $remote
if git diff-tree --quiet "HEAD..$remote/$branch"; then
    echo "The branch is up-to-date."
    exit 2
else
    # Preserve merges when rebasing.
    # See https://derekgourlay.com/blog/git-when-to-merge-vs-when-to-rebase/
    git rebase --preserve-merges "$remote/$branch"
fi
