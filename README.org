#+startup: content
* Home-Manager Configuration
[[https://circleci.com/gh/akirak/home.nix][https://circleci.com/gh/akirak/home.nix.svg?style=svg]]

This repository contains my user configuration files,
which are actually [[https://nixos.org/nix/][nix]] configuration files for [[https://github.com/rycee/home-manager][home-manager]].
If you are looking for an alternative way to manage "dotfiles", this repository may be an example.
A better example will be John Wiegley's [[https://github.com/jwiegley/nix-config][nix-config]] repository.
** Table of contents                                              :noexport:
:PROPERTIES:
:TOC:      siblings
:END:
    -  [[#prerequisites][Prerequisites]]
    -  [[#installation-and-usage][Installation and usage]]
      -  [[#make-configuration][Make configuration]]
      -  [[#updating-the-configuration][Updating the configuration]]
      -  [[#initial-installation][Initial installation]]
        -  [[#bootstrapping][Bootstrapping]]
        -  [[#choosing-a-profile][Choosing a profile]]
        -  [[#installation][Installation]]
      -  [[#installing-dependencies][Installing dependencies]]
        -  [[#fuse-support][FUSE support]]
      -  [[#post-installation][Post installation]]
        -  [[#system-icons-only-on-chrome-os][System icons (only on Chrome OS)]]
        -  [[#change-the-shell][Change the shell]]
      -  [[#extra-stuffs-that-are-not-installed-by-nix][Extra stuffs that are not installed by Nix]]
        -  [[#my-emacs-configuration][My Emacs configuration]]
        -  [[#chemacs][Chemacs]]
        -  [[#lorri][Lorri]]
      -  [[#maintenance][Maintenance]]
        -  [[#git-hooks][Git hooks]]
        -  [[#cleaning-up][Cleaning up]]
      -  [[#phony][Phony]]

** Prerequisites
This configuration should run on Linux operating systems.
** Installation and usage
:PROPERTIES:
:header-args:makefile: :tangle Makefile
:header-args:shell: :tangle no
:END:
*** Make configuration
Administration tasks for this configuration are organized as a set of make tasks.

The following environment variables are set for the entire makefile.

#+begin_src makefile
export HOME_MANAGER_CONFIG = $(shell pwd)/home.nix
#+end_src
*** Updating the configuration
You can update the configuration by running =make=:

#+begin_src shell
make
#+end_src

The default tasks is defined as follows:

#+begin_src makefile
update: home-manager emacs-config
#+end_src

That is, it runs home-manager and installs or updates my Emacs configuration.

Updating home-manager consists of the following tasks:

1. Install dependencies.
2. Run home-manager.
3. Run post installation tasks.

#+begin_src makefile
home-manager: tangle deps
	which home-manager >/dev/null 2>&1 || nix-shell '<home-manager>' -A install
	home-manager -I $(shell pwd) switch
	$(MAKE) post-install
#+end_src

#+begin_src makefile
tangle:
	if command -v emacs >/dev/null 2>&1; then \
		emacs --batch --eval "(progn (require 'ob) (org-babel-tangle-file \"README.org\"))"; \
	fi
#+end_src
*** Initial installation
**** Bootstrapping
You can install this configuration on any Linux machine without any dependencies:

#+begin_src shell
curl https://raw.githubusercontent.com/akirak/home.nix/master/bootstrap.sh | sh
#+end_src

It installs dependencies, clones the repository in =~/home.nix=, and runs all jobs required for installation. It also installs [[https://github.com/akirak/emacs.d][my Emacs configuration]] if =~/.emacs.d= does not exist.

Alternatively, you can clone this repository to anywhere and run

#+begin_src shell
./bootstrap.sh
#+end_src

The following is the full source code of the script:

#+begin_src shell :tangle bootstrap.sh
#!/bin/sh
NIX_OS_VERSION=unstable
HM_URL=https://github.com/rycee/home-manager/archive/master.tar.gz
REPO_URL=https://github.com/akirak/home.nix.git
REPO_DEST="$HOME/home.nix"

set -e

if ! command -v nix-env >/dev/null 2>&1; then
    curl https://nixos.org/nix/install | sh \
        && . $HOME/.nix-profile/etc/profile.d/nix.sh
fi

nix-channel --add https://nixos.org/channels/nixos-${NIX_OS_VERSION} nixpkgs
nix-channel --add "${HM_URL}" home-manager
nix-channel --update

if ! command -v git >/dev/null 2>&1; then
    nix-env -i git
fi

if ! command -v systemctl >/dev/null 2>&1; then
    echo "Installing systemd from nixpkgs."
    echo "This may not work on non-NixOS distribution."
    nix-env -i systemd
fi

if [ ! -d /etc/nixos ]; then
    mkdir -m 0755 -p /nix/var/nix/{profiles,gcroots}/per-user/$USER
fi

if [ $(git config --local remote.origin.url) != "${REPO_URL}" ]; then
    git clone "${REPO_URL}" "${REPO_DEST}"
    git submodule update --init --recursive
    cd "${REPO_DEST}"
fi

if nix-env -q 'git.*' >/dev/null 2>&1; then
    echo "Uninstalling git to avoid conflict..."
    nix-env -e git
fi

echo <<EOF
Choose a profile and run

  make all

EOF

nix-shell -p gnumake
#+end_src
**** Choosing a profile
**** Installation
After configuring your profile, run

#+begin_src shell
make all
#+end_src

to install all the components.

#+begin_src makefile
all: install-hooks chemacs home-manager lorri emacs-config
#+end_src
*** Installing dependencies
Some dependencies cannot be installed by Nix, so they need to be installed in advance.

#+begin_src makefile
deps: fuse
#+end_src
**** FUSE support
If the platform is WSL 1, then the operating system should be Debian or Ubuntu, and =fusermount= must be installed.
#+begin_src makefile
fuse:
	if grep --silent -P "ID(_LIKE)?=debian" /etc/os-release \
		&& ! which fusermount >/dev/null 2>&1 \
		&& ./scripts/is-wsl; then \
		sudo apt-get install --yes fuse; \
	fi
#+end_src
*** Post installation
Some tasks need to be run after home-manager.

#+begin_src makefile
post-install: system-icons chsh
#+end_src
**** System icons (only on Chrome OS)
#+begin_src makefile
system-icons:
	garcon-helper copy-icons
#+end_src
**** Change the shell
Somehow this doesn't work.

#+begin_src makefile
chsh:
# I won't run chsh inside Makefile until I find out a proper way to do this
# 	scripts/chsh-zsh
#+end_src
*** Extra stuffs that are not installed by Nix
**** My Emacs configuration
My Emacs configuration is installed to =~/.emacs.d=. If it is already installed, it runs the updating script (=update.bash=) contained in the repository.

I usually stay on =maint= branch in the repository, so the branch is checked out by default.

#+begin_src makefile
emacs-config:
	if [ ! -d "$(HOME)/.emacs.d" ]; then \
		git clone -b maint https://github.com/akirak/emacs.d.git "$(HOME)/.emacs.d"; \
	else \
		cd "$(HOME)/.emacs.d"; ./update.bash; \
	fi
#+end_src
**** Chemacs
#+begin_src makefile
chemacs:
	cd contrib/chemacs && ./install.sh

	if [ ! -f "$(HOME)/.emacs-profiles.el" ]; then \
		install -m 644 -t "$(HOME)" -v dotfiles/.emacs-profiles.el; \
	fi

	if [ ! -f "$(HOME)/.custom.el" ]; then \
		touch "$(HOME)/.custom.el"; \
	fi
#+end_src
**** Lorri
#+begin_src makefile
lorri:
	if ! command -v lorri >/dev/null 2>&1; then \
		scripts/install-lorri; \
	fi
#+end_src
*** Maintenance
**** Git hooks
#+begin_src makefile
install-hooks:
	if [ -e .git ]; then nix-shell -p git --run 'git config core.hooksPath .githooks'; fi
#+end_src
**** Cleaning up
#+begin_src makefile
clean:
	sudo rm -rf /homeless-shelter
#+end_src
*** Phony                                                        :noexport:
#+begin_src makefile
.PHONY: install-hooks all chemacs home-manager system-icons clean \
		chsh update-nix-channels init-home-manager lorri tangle emacs-config
#+end_src
** Meta                                                           :noexport:
:PROPERTIES:
:TOC:      ignore
:END:
# Local Variables:
# before-save-hook: org-make-toc
# org-id-link-to-org-use-id: nil
# org-src-preserve-indentation: t
# End:
