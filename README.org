#+startup: content
* Home-Manager Configuration
[[https://circleci.com/gh/akirak/home.nix][https://circleci.com/gh/akirak/home.nix.svg?style=svg]]

This repository contains my user configuration files,
which are actually [[https://nixos.org/nix/][nix]] configuration files handled by [[https://github.com/rycee/home-manager][home-manager]].
If you are looking for a more modern way to manage /dotfiles/, this repository may or may not be an example.
However, a better example will be John Wiegley's [[https://github.com/jwiegley/nix-config][nix-config]] repository.
** Table of contents                                              :noexport:
:PROPERTIES:
:TOC:      siblings
:END:
-  [[#prerequisites][Prerequisites]]
-  [[#installation-and-usage][Installation and usage]]
  -  [[#initial-installation][Initial installation]]
    -  [[#bootstrapping][Bootstrapping]]
    -  [[#installation][Installation]]

** Prerequisites
This configuration should run on Linux operating systems.
** Installation and usage
*** Initial installation
**** Bootstrapping
You can install this configuration on any Linux machine without any dependencies:

#+begin_src shell
curl https://raw.githubusercontent.com/akirak/home.nix/master/bootstrap.sh | sh
#+end_src

It installs dependencies, clones the repository in =~/home.nix=, and runs all jobs required for installation. It also installs [[https://github.com/akirak/emacs.d][my Emacs configuration]] if =~/.emacs.d= does not exist.

Alternatively, you can clone this repository to anywhere and run

#+begin_src shell
./bootstrap.sh
#+end_src

The following is the full source code of the script:

#+begin_src shell :tangle bootstrap.sh
  #!/bin/sh
  NIX_OS_VERSION=20.09
  HM_URL=https://github.com/rycee/home-manager/archive/release-${NIX_OS_VERSION}.tar.gz
  REPO_URL=https://github.com/akirak/home.nix.git
  REPO_DEST="$HOME/home.nix"

  set -e

  export NIX_BUILD_SHELL=$(command -v bash)

  is_wsl() {
      if grep -F Linux /proc/sys/kernel/ostype >/dev/null; then
          return 1
      fi
      grep -P "(Microsoft|WSL)" /proc/sys/kernel/osrelease > /dev/null \
          && grep -P "(Microsoft|WSL)" /proc/version >/dev/null
  }

  if is_wsl; then
      echo <<EOF > $HOME/.config/nix/nix.conf
  sandbox = false
  use-sql-wal = false
  keep-derivations = true
  keep-outputs = true
  pexperimental-features = nix-command flakes
  EOF
  else
      echo <<EOF > $HOME/.config/nix/nix.conf
  keep-derivations = true
  keep-outputs = true
  pexperimental-features = nix-command flakes
  EOF
  fi

  if ! command -v nix-env >/dev/null 2>&1; then
      if ! command -v xz >/dev/null 2>&1; then
          if grep -P ^'ID(_LIKE)?=debian' /etc/os-release >/dev/null; then
              sudo apt-get update --yes && sudo apt-get install --yes xz-utils
          else
              echo "xz program is missing, but don't know how to install it" >&2
              exit 1
          fi
      fi

      tmp=$(mktemp)
      curl -L https://nixos.org/nix/install > $tmp
      chmod +x $tmp
      $tmp --no-daemon
      rm $tmp
      . $HOME/.nix-profile/etc/profile.d/nix.sh
  fi

  nix-channel --add https://nixos.org/channels/nixos-${NIX_OS_VERSION} nixpkgs
  nix-channel --add "${HM_URL}" home-manager
  nix-channel --update

  if ! command -v git >/dev/null 2>&1; then
      nix-env -i git
  fi

  if ! command -v systemctl >/dev/null 2>&1; then
      echo "Installing systemd from nixpkgs."
      echo "This may not work on non-NixOS distribution."
      nix-env -i systemd
  fi

  if [ ! -d /etc/nixos ]; then
      mkdir -m 0755 -p /nix/var/nix/{profiles,gcroots}/per-user/$USER
  fi

  if [ "$PWD" = "${REPO_DEST}" ]; then
      origin="$(git config --local remote.origin.url)"
      # Ensure that the origin is the same as REPO_URL
      [ "$origin" = "${REPO_URL}" ]
  else
      if [ ! -d "${REPO_DEST}" ]; then
          git clone "${REPO_URL}" "${REPO_DEST}"
      fi
      cd "${REPO_DEST}"
  fi
  git submodule update --init --recursive

  if nix-env -q 'git.*' >/dev/null 2>&1; then
      echo "Uninstalling git to avoid conflict..."
      nix-env -e git
  fi

  echo <<EOF
  Run

    make all

  EOF

  if [ -z "${BOOTSTRAP_PREVENT_SUBSHELL}" ]; then
      nix-shell -p gnumake -p git
  fi
#+end_src
**** Installation
Run

#+begin_src shell
make all
#+end_src

to install all the components.
** Meta                                                           :noexport:
:PROPERTIES:
:TOC:      ignore
:END:
# Local Variables:
# before-save-hook: org-make-toc
# org-id-link-to-org-use-id: nil
# org-src-preserve-indentation: t
# End:
